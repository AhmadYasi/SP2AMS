generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bills {
  bill_id               Int                   @id @default(autoincrement())
  room_id               Int
  water_usage           Decimal               @db.Decimal(10, 2)
  water_cost            Decimal               @db.Decimal(10, 2)
  electricity_usage     Decimal               @db.Decimal(10, 2)
  electricity_cost      Decimal               @db.Decimal(10, 2)
  additional_rates_cost Decimal               @db.Decimal(10, 2)
  billing_date          DateTime              @db.Date
  baserent_month        String                @db.VarChar(20)
  baserent_year         Int
  total_amount          Decimal               @db.Decimal(10, 2)
  billing_number        String?               @db.VarChar(20)
  RoomBaseDetails       RoomBaseDetails       @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction)
  GeneratedBillRecord   GeneratedBillRecord[]
}

model BillSequence {
  year          Int @id
  last_sequence Int?

  @@map("BillSequence")
}


model GeneratedBillRecord {
  bill_record_id  Int             @id @default(autoincrement())
  generation_date DateTime        @db.Date
  rent_month      String
  room_id         Int
  rent_year       Int
  bill_id         Int?
  payment_status  PaymentStatus   @default(PENDING)
  RoomBaseDetails RoomBaseDetails @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction)
  Bill            bills?           @relation(fields: [bill_id], references: [bill_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([generation_date, room_id])
}

model tenancy_records {
  record_id        Int             @id @default(autoincrement())
  tenant_id        Int
  room_id          Int
  move_in_date     DateTime        @db.Date
  move_out_date    DateTime?       @db.Date
  period_of_stay   Int?
  deposit          Decimal?        @db.Decimal(10, 2)
  tenancy_status   TenancyStatus   @default(CHECK_IN)
  RoomBaseDetails  RoomBaseDetails @relation(fields: [room_id], references: [room_id], onDelete: NoAction, onUpdate: NoAction)
  tenants          tenants         @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

enum TenancyStatus {
  CHECK_IN
  CHECK_OUT
}

model manager {
  manager_id       Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar(255)
  email            String             @db.VarChar(255)
  password_hash    String
  phone_number     String?            @db.VarChar(20)
  profile_image    String             @db.VarChar(255)
  service_contacts service_contacts[]
}

model meter_readings {
  reading_id          Int             @id @default(autoincrement())
  room_id             Int
  water_reading       Int?
  electricity_reading Int?
  reading_date        DateTime        @db.Date
  RoomBaseDetails     RoomBaseDetails @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction)
}

model rates {
  rate_id          Int          @id @default(autoincrement())
  item_name        String       @db.VarChar(255)
  item_price       Decimal      @db.Decimal(10, 2)
  item_description String?
  last_updated     DateTime?    @default(now()) @db.Timestamptz(6)
  room_rates       room_rates[]
  VAT_Percentage   Int              @default(0)
  disable_rate     Boolean          @default(false)
}

model room_rates {
  room_id         Int
  rate_id         Int
  quantity        Int             @default(1)
  rates           rates           @relation(fields: [rate_id], references: [rate_id], onDelete: Cascade, onUpdate: NoAction)
  RoomBaseDetails RoomBaseDetails @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([room_id, rate_id])
}

model RoomBaseDetails {
  room_id              Int                   @id @default(autoincrement())
  room_number          String                @db.VarChar(50)
  floor                Int
  base_rent            Decimal               @db.Decimal(10, 2) @default(0)
  room_type            String                @db.VarChar(50)
  deposit              Decimal               @db.Decimal(10, 2)
  statusDetails        RoomStatusDetails     @relation(fields: [statusDetailsId], references: [status_id], onDelete: Cascade)
  statusDetailsId      Int                   @unique
  bills                bills[]
  tenancy_records      tenancy_records[]
  meter_readings       meter_readings[]
  room_rates           room_rates[]
  tenants              tenants[]
  Request              Request[]
  generatedBillRecords GeneratedBillRecord[]
}

model RoomStatusDetails {
  status_id        Int              @id @default(autoincrement())
  occupancy_status String           @db.VarChar(50)
  is_reserved      Boolean          @default(false)
  roomBaseDetails  RoomBaseDetails?
}

enum PaymentStatus {
  PAID
  PENDING
  OVERDUE
  PARTIAL
  Null
}

enum InvoiceOption {
  EMAIL
  PAPER
  BOTH
}

enum AccountStatus {
  ACTIVE
  INACTIVE
}

enum ContractStatus {
  NEW
  ONGOING
  DUE
  WARNING
  CHECKED_OUT
  TERMINATED
}

model tenants {
  tenant_id              Int               @id @default(autoincrement())
  first_name             String            @db.VarChar(100)
  last_name              String            @db.VarChar(100)
  personal_id            String            @unique @db.VarChar(255)
  contract_status        ContractStatus    @default(NEW)
  invoice_option         InvoiceOption     @default(EMAIL)
  account_status         AccountStatus     @default(ACTIVE)
  tenant_image           String            @db.VarChar(255)
  nationalcard_image     String            @db.VarChar(255)
  tenancy_records        tenancy_records[]
  addresses              addresses?
  contacts               contacts?
  RoomBaseDetails        RoomBaseDetails?  @relation(fields: [roomBaseDetailsRoom_id], references: [room_id])
  roomBaseDetailsRoom_id Int?
}

model addresses {
  address_id   Int     @id @default(autoincrement())
  tenant_id    Int
  addressnumber       String  @db.VarChar(5)
  street       String  @db.VarChar(255)
  sub_district String  @db.VarChar(255)
  district     String  @db.VarChar(255)
  province     String  @db.VarChar(255)
  postal_code  String  @db.VarChar(20)
  tenants      tenants @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade)

  @@unique([tenant_id])
}

model contacts {
  contact_id   Int     @id @default(autoincrement())
  tenant_id    Int
  phone_number String  @db.VarChar(20)
  email        String  @db.VarChar(255)
  line_id      String  @db.VarChar(255)
  eme_name     String  @db.VarChar(255)
  eme_phone    String  @db.VarChar(20)
  eme_line_id  String  @db.VarChar(255)
  eme_relation String  @db.VarChar(255)
  tenants      tenants @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade)

  @@unique([tenant_id])
}

enum RequestPriority {
  URGENT
  HIGH
  MODERATE
  NORMAL
  LOW
}

enum RequestStatus {
  RESOLVED
  UNRESOLVED
}

model Request {
  request_id       Int             @id @default(autoincrement())
  room_id          Int
  issue_date       DateTime        @default(now())
  resolved_date    DateTime?        
  request_details  String
  Request_priority RequestPriority
  Request_status   RequestStatus   @default(UNRESOLVED)
  roomBaseDetails  RoomBaseDetails @relation(fields: [room_id], references: [room_id], onDelete: Cascade)
}

model service_contacts {
  service_contact_id Int     @id @default(autoincrement())
  name               String  @db.VarChar(255)
  nickname           String? @db.VarChar(255)
  phone_number       String  @db.VarChar(20)
  occupation         String  @db.VarChar(255)
  line_id            String  @db.VarChar(255)
  image              String  @db.VarChar(255)
  manager_id         Int
  manager            manager @relation(fields: [manager_id], references: [manager_id], onDelete: Cascade)
}
